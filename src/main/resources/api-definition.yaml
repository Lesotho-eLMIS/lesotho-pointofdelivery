#%RAML 0.8
---
title: OpenLMIS Point of Delivery
version: "@version@"
baseUri: "@baseUrl@"
protocols: [ HTTP, HTTPS ]

documentation:
    - title: Getting Started
      content: |
        OpenLMIS Point of Delivery is based around the concept of Stock Cards and the creation of a
        permanent ledger accounting for all changes to the Stock on Hand over time.
        Each Stock Card is composed of line items, each representing a specific change to a
        particular set of Stock in Inventory. These ledgers expect that they may be updated as part
        of a larger distributed system with occassional internet connectivity and so changes to the
        ledger may come out of order and after the physical change to stock on hand occurred.

        This service also has Resources for:
        * Perparing and submitting a Physical Inventory.
        * Stock Events:  the only way to update (write operation) a Stock Card.  Not only are
          these events the only way to change a Stock Card, one event is one atomic transaction
          to the type of Stock Event being described:  a single adjustment, a batch, a receipt, etc.
        * The types of Organizations (facility, free text).
        * Configuring the types of Reasons that might be given when adjusting, issuing, or
          otherwise accounting for stock.
        * Configuring the lists of valid desitnations and sources (places you may send and receive
          stock).
        * Point of Delivery Events: enter point of delivery details

        This service does not currently support bin cards (ledgers for Stock in Inventory in a
        particular bin, room, shelf, etc), though it's expected that functionality will be added
        soon.

schemas:
  - program: !include schemas/program.json
  - facility: !include schemas/facility.json
  - orderable: !include schemas/orderable.json
  - lot: !include schemas/lot.json
  - lineItem: !include schemas/lineItem.json
  - facilityType: !include schemas/facilityType.json
  - reason: !include schemas/reason.json
  - reasons: |
       {
           "type": "array",
           "items": { "type": "object", "$ref": "schemas/reason.json" }
       }
  - geographicZone: !include schemas/geographicZone.json
  - stockCardTemplate: !include schemas/stockCardTemplate.json
  - stockEventDto: !include schemas/stockEventDto.json
  - stockEventLineItemDto: !include schemas/stockEventLineItemDto.json
  - pointOfDeliveryEventDto: !include schemas/pointOfDeliveryEventDto.json

  - stockCard: !include schemas/stockCard.json
  - stockCardPage: !include schemas/stockCard.json
  - stockCardSummariesPage: !include schemas/stockCardSummaryV2Page.json
  - stockCardSummaries: !include schemas/stockCardSummaries.json
  - stockCardReasonSummaryPage: !include schemas/stockCardRangeSummaryPage.json
  - validSourceDestination: !include schemas/validSourceDestination.json
  - validSourceDestinations: |
        {
            "type": "array",
            "items": {"type": "object", "$ref": "schemas/validSourceDestination.json"}
        }
  - validReasonAssignment: !include schemas/validReasonAssignment.json
  - validReasonAssignments: |
        {
            "type": "array",
            "items": {"type": "object", "$ref": "schemas/validReasonAssignment.json"}
        }
  - organization: !include schemas/organization.json
  - organizations: |
        {
            "type": "array",
            "items": {"type": "object", "$ref": "schemas/organization.json"}
        }
  - physicalInventoryLineItem: !include schemas/physicalInventoryLineItem.json
  - physicalInventory: !include schemas/physicalInventory.json
  - physicalInventories: |
        {
            "type": "array",
            "items": {"type": "object", "$ref": "schemas/physicalInventory.json"}
        }
  - stockAdjustment: !include schemas/stockAdjustment.json
  - localizedMessage: !include schemas/localizedMessage.json
  - uuid: |
      {
        "type": "string",
        "pattern": "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
      }
  - arrayOfStrings: |
      {
        "type": "array",
        "items": {
          "type": "string"
        }
      }

resourceTypes:
    - collection:
        get:
            responses:
                200:
                  description: Collection retrieved successfully
                  headers:
                    X-Content-Type-Options:
                    X-XSS-Protection:
                  body:
                      application/json:
                          schema: <<schema>>
                404:
                  description: Collection is empty.
                  headers:
                    X-Content-Type-Options:
                    X-XSS-Protection:
        post:
            body:
                application/json:
                    schema: <<schema>>
            responses:
                201:
                  description: Item created successfully
                  headers:
                    X-Content-Type-Options:
                    X-XSS-Protection:
                  body:
                      application/json:
                          schema: <<schema>>
    - member:
        get:
            responses:
                200:
                    body:
                        application/json:
                            schema: <<schema>>
        post:
            body:
                application/json:
                    schema: <<schema>>
            responses:
                200:
                    body:
                        application/json:
                            schema: <<schema>>
        delete:
            responses:
                200:

traits:
    - secured:
        queryParameters:
            access_token:
                displayName: access_token
                description: OAuth2 access token
                type: string
                required: false
                repeat: false
        headers:
            Authorization:
                displayName: Authorization
                description: OAuth2 authorization token header. Takes the form of 'Bearer <token>'.
                type: string
                required: false
                repeat: false



    - paginated:
        queryParameters:
            page:
                description: The page number which should be displayed. Note that the first page is numbered zero rather than one. Additionally, negative and undefined values are interpreted as zero.
                type: integer
                required: false
                repeat: false
            size:
                description: The desired size of each page. This specifies the maximum number of values that should be returned by the server. Zero, undefined, and negative values should result in all possible values being returned.
                type: integer
                required: false
                repeat: false
    - sorted:
        queryParameters:
            sort:
                description: Sorting criteria in the format "property(,asc|desc)". Default sort order is ascending. Multiple sort criteria are supported.
                type: string
                required: false
                repeat: true

/api:
  /podEvents:
      post:
        is: [ secured ]
        description: Create a new point of delivery event.
        body:
          application/json:
            schema: pointOfDeliveryEventDto

        responses:
          201:
            description: Point of delivery event has been processed with no validation error or persistence error.
            headers:
              Keep-Alive:
            body:
              application/json:
                schema: uuid

          400:
            description: Failed to process point of delivery event due to validation error.
            body:
              application/json:
                  schema: localizedMessage

          403:
            description: User does not have permission to create point of delivery events for given facility (destination).
            body:
              application/json:
                  schema: localizedMessage

      get:
        is: [ secured ]
        description: Get a list of point of delivery events
        queryParameters:
          destinationId:
            required: true
          
        responses:
          200:
            description: |
              Returns a default templte with all fields set to not display when no query parameters are passed.

              Returns template that matches destination id.
            headers:
              X-Content-Type-Options:
              X-XSS-Protection:
            body:
              application/json:
                schema: pointOfDeliveryEventDto
          404:
            description: Point of delivery events not found for the given query parameter.
            body:
              application/json:
                schema: localizedMessage
          400:
            body:
              application/json:
                  schema: localizedMessage
            description: Provided query parameters are not correctly formatted.
      
      /{id}:
        uriParameters:
          id:
            displayName: id
            type: string
            required: true
            repeat: false
        put:
            is: [ secured ]
            description: Update point of delivery event.
            body:
              application/json:
                schema: pointOfDeliveryEventDto

            responses:
              200:
                description: Point of delivery event updated.
                headers:
                  Keep-Alive:
                body:
                  application/json:
                    schema: pointOfDeliveryEventDto
              400:
                body:
                  application/json:
                      schema: localizedMessage
                description: An error occured during request processing.

              403:
                description: User does not have permission to save a point of delivery event.
                body:
                  application/json:
                      schema: localizedMessage