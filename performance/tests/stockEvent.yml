execution:
  - concurrency: 1
    hold-for: 2m
    scenario: send-stock-event

scenarios:
  get-user-token:
    requests:
    - if: '${__javaScript(vars.get("access_token") == null)}'
      then:
        - url: ${__P(base-uri)}/api/oauth/token
          method: POST
          label: GetUserToken
          headers:
            Authorization: Basic ${__base64Encode(${__P(user-auth)})}
          body:
            grant_type: password
            username: ${__P(username)}
            password: ${__P(password)}
          extract-jsonpath:
            access_token:
              jsonpath: $.access_token
  get-full-supply-approved-products:
    requests:
    - if: '${__javaScript(vars.get("full_products") == null)}'
      then:
        - url: ${__P(base-uri)}/api/facilities/${facility_id}/approvedProducts?programId=${program_id}&fullSupply=true
          method: GET
          label: GetFullSupplyApprovedProducts
          headers:
            Authorization: Bearer ${access_token}
            Content-Type: application/json
          extract-jsonpath:
            full_products:
              jsonpath: $
  send-stock-event:
    variables:
      # Balaka District Hospital
      facility_id: 13037147-1769-4735-90a7-b9b310d128b8
      # Essential Meds
      program_id: 10845cb9-d365-4aaa-badd-b4fa39c6a26a
      # Administrator
      user_id: a337ec45-31a0-4f2b-9b2e-a105c4b669bb
    requests:
      - include-scenario: get-user-token
      - include-scenario: get-full-supply-approved-products
      - url: ${__P(base-uri)}/api/stockEvents
        method: POST
        label: SendStockEvent
        headers:
          Authorization: Bearer ${access_token}
          Content-Type: application/json
        jsr223:
          execute: before
          script-text: |
            import groovy.json.JsonOutput
            import groovy.json.JsonSlurper

            def parser = new JsonSlurper()
            def products = parser.parseText(vars.get("full_products"))
            products = products.sort { it -> it.orderable.id }

            def eventLineItems = new ArrayList()

            products.eachWithIndex { it, index ->
              eventLineItems.add([
                orderableId: it.orderable.id,
                quantity: (index + 1) * 10,
                occurredDate: new Date().format('yyyy-MM-dd'),
                stockAdjustments: [
                  [quantity: (index + 1) * 5, reasonId: "313f2f5f-0c22-4626-8c49-3554ef763de3"],
                  [quantity: (index + 1) * 5, reasonId: "b5c27da7-bdda-4790-925a-9484c5dfb594"]
                ]
              ])
            }

            def stockEvent = [
              facilityId: vars.get("facility_id"),
              programId: vars.get("program_id"),
              userId: vars.get("user_id"),
              lineItems: eventLineItems
            ]

            vars.put("stock_event", JsonOutput.toJson(stockEvent))
        body: ${stock_event}

reporting:
    - module: passfail
      criteria:
        Send stock event too slow: p90 of SendStockEvent>500ms
